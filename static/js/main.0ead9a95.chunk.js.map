{"version":3,"sources":["components/Weather.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","weatherIcon","temp_celsius","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_weatherIcon","id","state","undefined","icons","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","rangeId","this","icon","Math","floor","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0ead9a95.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Weather = props => {\r\n  return (\r\n    <div className=\"container text-light\">\r\n      <div className=\"cards pt-4\">\r\n        <h1>{props.city}</h1>\r\n        <h5 className=\"py-4\">\r\n          <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n        </h5>\r\n\r\n        {props.temp_celsius ? (\r\n          <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\r\n        ) : null}\r\n        {/* Show Max and Min Temp */}\r\n        {minmaxTemp(props.temp_min, props.temp_max)}\r\n\r\n        <h4 className=\"py-3\">{props.description}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction minmaxTemp(min, max) {\r\n  if (min && max) {\r\n    return (\r\n      <h3>\r\n        <span className=\"px-4\">{min}&deg;</span>\r\n        <span className=\"px-4\">{max}&deg;</span>\r\n      </h3>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport \"./Form.css\";\r\n\r\nconst Form = props => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div>{props.error ? error() : null}</div>\r\n      <form onSubmit={props.loadweather}>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-3 offset-md-2\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"city\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"City\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"country\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"Country\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 md-0 py-2 text-md-left\">\r\n            <button className=\"btn btn-warning\">Get Weather</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction error() {\r\n  return (\r\n    <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n      Please Enter City And Country\r\n    </div>\r\n  );\r\n}\r\nexport default Form;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Weather from \"./components/Weather\";\nimport Form from \"./components/Form\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\n\nconst apiKey = \"dcca2ce0e3c468844ac293247e8d328e\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icons: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    };\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  get_weatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstorm });\n        break;\n\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle });\n        break;\n\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({ icon: this.weatherIcon.Rain });\n        break;\n\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: this.weatherIcon.Snow });\n        break;\n\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: this.weatherIcon.Atmosphere });\n        break;\n\n      case rangeId === 800:\n        this.setState({ icon: this.weatherIcon.Clear });\n        break;\n\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: this.weatherIcon.Clouds });\n        break;\n\n      default:\n        this.setState({ icon: this.weatherIcon.Clouds });\n        break;\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n  getWeather = async e => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    if (city && country) {\n      const api_call = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${apiKey}`\n      );\n\n      const response = await api_call.json();\n\n      console.log(response);\n\n      this.setState({\n        city: `${response.name},${response.sys.country}`,\n\n        celsius: this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n        error: false\n      });\n      this.get_weatherIcon(this.weatherIcon, response.weather[0].id);\n    } else {\n      this.setState({ error: true });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error} />\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          temp_celsius={this.state.celsius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          description={this.state.description}\n          weatherIcon={this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}